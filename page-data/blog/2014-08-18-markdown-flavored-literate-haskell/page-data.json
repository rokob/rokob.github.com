{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-08-18-markdown-flavored-literate-haskell/","result":{"data":{"markdownRemark":{"html":"<p>I have been playing around with literate Haskell recently while working on some exercises\nin <a href=\"http://www.cis.upenn.edu/~bcpierce/tapl/\">Types and Programming Languages</a>. The book uses OCaml for the implementations,\nbut I decided to do them in Haskell. I wanted a way to write a blog post in the same format\nas my other posts, i.e. Markdown and processed by Jekyll. But I also did not want to copy\nand paste a bunch of code examples from the implementations in order to talk about them.</p>\n<p>Hence literate Haskell. I just write the code in a way that both the Jekyll processor can turn\nin to HTML and which GHC can turn into executable bytes. It wasn't too hard to do this\neither, although it was not 100% trivial. I wrote two new Jekyll plugins, one for\ndoing a little bit a preprocessing to the <code class=\"language-text\">.lhs</code> file to turn it into a Markdown file,\nand another to load up the blog post as a module and execute commands via GHC in a subprocess\nwhile the blog is being generated.</p>\n<h2>A simple function</h2>\n<p>Just to show some stuff in this post without going into all of the TAPL stuff that I want\nto get to later, here are some function definitions in Haskell</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">myfact</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">myfact</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">myfact</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">myfact'</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">myfacttail</span> <span class=\"token hvariable\">n</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">myfacttail</span> <span class=\"token number\">0</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span>\n<span class=\"token hvariable\">myfacttail</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">myfacttail</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">m</span><span class=\"token operator\">*</span><span class=\"token hvariable\">n</span></code></pre></div>\n<p>You should probably know what these are.</p>\n<h2>Code execution</h2>\n<p>We can also easily execute code during the\nblog generation pass and embed the results directly in the page. Without further ado:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">位> :t myfact\nmyfact :: (Eq a, Num a) => a -> a\n位> myfact 10\n3628800\n位> :t myfact'\nmyfact' :: (Eq a, Num a) => a -> a\n位> myfact' 10\n3628800</code></pre></div>\n<p>That is pretty cool in my opinion. The output here is actually probably not that\ncool, but if you look at the source and then at the output, the fact that all I had\nto do was run <code class=\"language-text\">jekyll build</code> in order to get all of this put together is pretty neat.\nYou can see the plugins in the git repo for this blog on the <code class=\"language-text\">source</code> branch.</p>\n<h2>Edit: this post no longer true</h2>\n<p>I changed this blog to no longer use jekyll and as I never really ended up using this feature in\nfuture posts, I decided not to port it over. So instead I have just embedded the actual output. I\nwill put a link here to the old code at some point if someone is still interested.</p>","frontmatter":{"title":"Markdown Flavored Literate Haskell","date":"18 Aug 2014","categories":"code","tags":["code","haskell","blog"]},"timeToRead":2,"wordCount":{"words":364},"fields":{"sha":"9a9b8cc9a846a5ab6c26cb187880f3092ad02345"},"parent":{"relativePath":"2014-08-18-markdown-flavored-literate-haskell.md"}}},"pageContext":{"slug":"/blog/2014-08-18-markdown-flavored-literate-haskell/"}},"staticQueryHashes":["3159585216","3192915761"],"slicesMap":{}}