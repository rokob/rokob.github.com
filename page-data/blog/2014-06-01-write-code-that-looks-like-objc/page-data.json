{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-06-01-write-code-that-looks-like-objc/","result":{"data":{"markdownRemark":{"html":"<p>When I look at someone's code, I immediately make a value judgment about the likelihood\nthat their code will work and that the person knows what they are doing based on the\nstyle of the their code. Basically, if the code matches my expectations for the language\nand it is clear then I have a feeling that this person is probably legit. I know this is\nnot a great thing to do for some reasons, mostly that this should not be a sign of positive\nquality but more a negative signal when the code is missing some of the qualities that\none expects. This is a similar filter to FizzBuzz. Most people who write code have no idea\nwhat they are doing, they don't understand code design or architecture,\nthey have terrible naming and syntax usage, and they typically cannot solve the most basic\nproblems. Poor style is a strong indicator of a lack of skills in the same way as struggling\nto complete FizzBuzz. This post is about what Objective-C is supposed to look like and why.</p>\n<h2>Know the Style Guidelines</h2>\n<p>The most important set of guidelines for Objective-C that the community has accepted are\nthose handed down <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html\">from above</a>. You should read through all of these guidelines\nat least once, if not multiple times as you encounter questions during development.\nThe set of things covered include:</p>\n<ul>\n<li>Code Naming Basics</li>\n<li>Naming Methods</li>\n<li>Naming Functions</li>\n<li>Naming Properties and Data Types</li>\n<li>Acceptable Abbreviations and Acronyms</li>\n</ul>\n<p>For instance, these guides settle the debate that every language has to undergo about whether\nit uses snake_case or camelCase. Objective-C has chosen the camel. Don't fight it, consistent\nnaming is incredibly important for writing code that is maintainable. The rest of the advice\nin the guides is pretty straightforward and you should try to follow it as closely as possible.</p>\n<p>There are however, some things that most people in the community have settled on that are\neither not directly stated in the style guide, or which are actually contradictory. One example\nstems from the following Apple guideline:</p>\n<blockquote>\n<p>Names of most private methods in the Cocoa frameworks have an underscore prefix (for example, _fooData ) to mark them as private. From this fact follow two recommendations.</p>\n<ul>\n<li>\n<p>Don't use the underscore character as a prefix for your private methods. Apple reserves this convention.</p>\n</li>\n<li>\n<p>If you are subclassing a large Cocoa framework class (such as NSView or UIView) and you want to be absolutely sure</p>\n</li>\n</ul>\n<p>that your private methods have names different from those in the superclass, you can add your own prefix to your\nprivate methods. The prefix should be as unique as possible, perhaps one based on your company or project and\nof the form \"XX_\". So if your project is called Byte Flogger, the prefix might be BF_addObject:</p>\n</blockquote>\n<p>At Facebook, pretty much everyone used <code class=\"language-text\">_foo:</code> as the style for a private method. Some care\nmay have been taken by the more conscientious of the bunch when subclassing a system class to use\na different convention to avoid accidentally overriding a private method of a superclass. Part of this stems\nfrom the lack of real encapsulation in Objective-C even though it makes you feel like it is there. Because of\nthe way method resolution works in the inheritance hierarchy, there is no such thing as a truly private\nmethod. Some people choose to just name things differently inside the implementation and then hope no\none sends that message which is not declared in the interface. Others choose to use categories such as\n<code class=\"language-text\">MyClass (Private)</code> to define private methods which are less than private for some other use cases, testing\nbeing a common one. Others use a class extension to declare their private methods. This can be useful to see\nthem all in one place and to possibly have a better place for documentation. Some people go so far as to\nuse static C functions declared in the implementation file. This gives you probably the closest thing\nto a real private \"method\", but it does not seem to be common practice in the community at large.\nThe modern LLVM compiler does not require you to explicitly declare methods within an implementation\nin order to call them, so frequently you will just not see a declaration separately from the definition.</p>\n<p>I have settled on a mix of static C functions, methods defined in an \"Internal\" header, and\nthen just properly named methods without a leading underscore which are just not declared anywhere\noutside of the implementation. Each of these have different use cases. I rarely define many methods in subclasses\nof system classes, so I rarely worry about name conflicts, plus the implementation looks much cleaner without\nall those underscore prefixed methods floating around. I use the interface as the source of truth for what\nis public so I don't really need the distinction within the implementation. Do use <code class=\"language-text\">pragmas</code> to separate\nsections of your implementations so that you can have one clear \"Public API\" section</p>\n<p>My use of static C functions is confined to pure functions which do not require <code class=\"language-text\">self</code>, for example</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token keyword\">static</span> NSArray<span class=\"token operator\">*</span> <span class=\"token function\">filterArrayWithBlock</span><span class=\"token punctuation\">(</span>NSArray <span class=\"token operator\">*</span>input<span class=\"token punctuation\">,</span> <span class=\"token function\">BOOL</span><span class=\"token punctuation\">(</span><span class=\"token operator\">^</span>predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>predicate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  NSMutableArray <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray arrayWithCapacity<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>input count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>input enumerateObjectsUsingBlock<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>id obj<span class=\"token punctuation\">,</span> NSUInteger idx<span class=\"token punctuation\">,</span> BOOL <span class=\"token operator\">*</span>stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>result addObject<span class=\"token punctuation\">:</span>obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>result copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is just a toy function that would probably be better suited as a member of a category on <code class=\"language-text\">NSArray</code>\nwhich adds functional programming primitives like <code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">filter</code>, etc. But you can declare\npure functions like this within your implementation file, and then call it possibly passing in\ninstance variables as arguments. There is no way that a subclass can override this behaviour, plus you trivially\ncan guarantee that you are not modifying the state of your object because the C function only has access\nto it's inputs, and you never should make <code class=\"language-text\">self</code> one of those inputs.</p>\n<p>I use methods in an \"Internal\" header to expose some things for tests. This is usually a smell I know,\nbut sometimes it is the only bridge between tested and untested code before you go through a big refactor.\nI see this often with async interfaces that need to expose some synchronization to make\ntests reliable.</p>\n<br />\n<h2>Dots and Brackets</h2>\n<p>If you are coming from Lisp then all the brackets everywhere should not make you too anxious, otherwise\nyou probably were a bit thrown off initially about all the brackets. The dot syntax is used in a variety of\nother languages so it might innately feel like the right thing to use in many cases. Like all other parts\nof this post, consistency within a codebase is more important than your preferences, so even if you disagree\nwith a certain use in a particular project, I suggest you be flexible rather than be \"that guy\". Nonetheless,\nthere is a correct style to use here. The dot syntax should only be used for simple property getter/setters,\nand typically this usually means only outside of an implementation because you should be using instance\nvariables directly inside an implementation (the one exception being to remain KVO compliant, however since you\nshould never use KVO this is moot). The bracket syntax should be used for everything else. The only alternative\nstyle is to never use the dot syntax and use brackets everywhere. So, using the dot syntax to\ncall a method is a bad thing.</p>\n<div class=\"incorrect\">\n```objc\n@interface SomeClass : NSObject\n@property (nonatomic, readwrite, copy) NSString *string;\n- (void)doIt;\n@end\n<p>// Somewhere else\nSomeClass *someClass = SomeClass.alloc.init;\nsomeClass.doIt;</p>\n<p>// The next line is okay in isolation\n[someClass setString:@\"Nope\"];\n// but mixing the method call setter with the dot getter is inconsistent\nNSLog(@\"%@\", someClass.string);</p>\n<p>// WTF?\nUIColor *myColor = UIColor.blackColor;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;/div>\n\n&lt;div class=\"correct\">\n```objc\n@interface SomeClass : NSObject\n@property (nonatomic, readwrite, copy) NSString *string;\n- (void)doIt;\n@end\n\n// Somewhere else\nSomeClass *someClass = [[SomeClass alloc] init];\n\nsomeClass.string = @\"Yeah\";\nNSLog(@\"%@\", someClass.string);\n\n[someClass doIt];</code></pre></div>\n</div>\n<h2>Embrace Selector Keywords and Verbosity</h2>\n<p>Objective-C is a verbose language, method calls can easily take up a lot of editor columns:</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>sendAction<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>aSelector toObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>anObject forAllCells<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>flag<span class=\"token punctuation\">;</span></code></pre></div>\n<p>that is not a bad thing if you use it to your advantage. The parts of a selector\nthat describe the argument is known as a keyword (this terminology comes from Smalltalk).\nIn many other languages, keyword arguments are the exception not the rule. Have you ever\nseen a function call in C that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sometimes people will throw in comments everywhere they call a function like this to explain\nwhat those random <code class=\"language-text\">false</code> arguments mean. This is terrible. This is partly just a product of\npoor design, but in Objective-C you are forced to make it look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token punctuation\">[</span>obj sendMessageWithIndex<span class=\"token punctuation\">:</span><span class=\"token number\">0</span> shouldReply<span class=\"token punctuation\">:</span>NO isHappy<span class=\"token punctuation\">:</span>YES callback<span class=\"token punctuation\">:</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Do Not Use \"new\"</h2>\n<p>Use <code class=\"language-text\">[[SomeClass alloc] init]</code> instead of <code class=\"language-text\">[SomeClass new]</code>. Why? It is idiomatic Objective-C,\nand you can't extend <code class=\"language-text\">new</code> to do more for you like <code class=\"language-text\">initWithStuff:</code>.</p>\n<h2>Use Pragmas Liberally</h2>\n<p>There is a preprocessor directive called \"pragma\" which Xcode picks up to define sections\nin the code navigator. The style is to use <code class=\"language-text\">#pragma</code> followed by the word <code class=\"language-text\">mark</code> and then\nsome text. You can place a single dash to create a horizontal rule in the code navigator.\nIf you put some text then it will show up as a bold header. It helps you to separate your methods\nin to useful sections without adding a bunch of comments, and it nicely gets picked up by\nXcode.</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">mark <span class=\"token operator\">-</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">mark NSObject</span></span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>initWith<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">mark <span class=\"token operator\">-</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">mark UIAlertViewDelegate</span></span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2>What Others Have To Say</h2>\n<p>If you Google for Objective-C style guides, you will find quite a lot of people have opinions. Most of\nthem are consistent with one another, and focus on syntax (i.e. how many spaces, tabs vs spaces, dots vs brackets), and spend\nless time on semantics. All of the style guides that come out of Google for various languages are top notch,\nand the <a href=\"http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml\">Objective-C one</a> does not disappoint. Two other good ones come from the <a href=\"https://github.com/NYTimes/objective-c-style-guide\">NY Times</a>\nand <a href=\"https://github.com/github/objective-c-conventions\">Github</a>. The most important bit of style advice is to choose something and be consistent\nwithin a project. However, if you are stepping into someone else's codebase, adapt to how they do things,\ndon't waste your time arguing the merits of the style you used at your last job. The only caveat to this is\nif there is clearly no consistent style, then work to get one enforced and the code converted as quickly\nas possible. I have my own style that I use on personal projects, which differed from the style at Facebook,\nbut I always just kept the two separate. I think it is good to expose yourself to multiple styles because\nyou can pick up the little bits that work better from each and merge them into something better.</p>\n<h2>And then Swift happened</h2>\n<p>So I was watching the WWDC keynote this morning and Apple announced a new langauge, Swift. This will be the\nlanguage for iOS and Mac development for the forseeable future. So all this talk about how to write\nObjective-C is going down the drain. So although there is a right way to write Objective-C, it doesn't\nmatter much anymore. I'll have to start working on \"Eloquent Swift\"...</p>","frontmatter":{"title":"Eloquent Objective-C: Write Code That Looks Like Objective-C","date":"01 Jun 2014","categories":"code","tags":["code","objc","eloquent"]},"timeToRead":7,"wordCount":{"words":1733},"fields":{"sha":"9a9b8cc9a846a5ab6c26cb187880f3092ad02345"},"parent":{"relativePath":"2014-06-01-write-code-that-looks-like-objc.md"}}},"pageContext":{"slug":"/blog/2014-06-01-write-code-that-looks-like-objc/"}},"staticQueryHashes":["3159585216","3192915761"],"slicesMap":{}}