{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-05-06-why-settle-for-one/","result":{"data":{"markdownRemark":{"html":"<p>In my new job I am working exclusively in Ruby at the moment. What that means for this blog is that most of\nthe code I talk about will be in related to Ruby. I actually have found Ruby to be a beautiful language\nas OO languages go. One of the things that has really blown me away is how similar Objective-C and Ruby are.\nIt is not that much of a surprise once one takes a step back and thinks about the design of the languages,\nbut Ruby wins in almost every regard from a design perspective. I don't really want to talk about that today\nthough, I have plans for a series of posts comparing different patterns in the two languages. This is going\nto be a Ruby post though.</p>\n<p>I was working on a problem where I needed to use <a href=\"https://github.com/sparklemotion/mechanize\">Mechanize</a> to script filling out a form. Actually,\nI have 50 subtly different forms that need to be filled out at different times. Fifty should remind you of the\nnumber of states in the US so you might see the domain where this comes from. Anywho, Mechanize has an alright\nAPI for interacting with an individual page or form on a page, but like any general tool, it does not present\nthe ideal API for my specific purpose. One approach is to just use the raw API directly in the place that you\nneed it and hope that you don't need to use something similar anywhere else. This is probably the way to go\nif you cannot imagine replacing the lower level API (Mechanize in this case) with any other library or if\nthe semantics are basically the same between your desired use and what API is already presented.</p>\n<p>My case involved violations of both of these conditions. The first condition is violated because I know for\na fact that I will need to use <a href=\"https://github.com/jnicklas/capybara\">Capybara</a> for a small subset of the sites I am interacting with\nbecause of their use of Javascript. For the second condition, I wanted to have a method like\n<code class=\"language-text\">check_radio_button(form, data)</code> where <code class=\"language-text\">form</code> is some representation of the form on which the radio button\nlives and <code class=\"language-text\">data</code> is sufficient information to select a single radio button. Mechanize presents an API that\nlets you find a radio button and check the button, but these are two method calls. The gain from moving to\none call isn't huge, but the real benefit is semantics. My API is more clear about what it is doing, and not\nonly that, I don't care how it is doing it, I just know that a radio button is getting checked. I have a need\nfor other related behaviours that take even more effort using the Mechanize API.</p>\n<p>Okay, so I am convinced that I need to wrap the given API with my own. It is important to actually think about\nthis point though before just wrapping the API. When someone creates an API, they put some thought into it\n(hopefully), they think about how people are going to use it, and they ideally iterate on it as the API is\nused over time. Your wrapper is likely to be as shitty if not shittier because you are just quickly trying to\nuse the thing that someone else has already thought a lot about. Maybe you have a flash of inspiration and you\ncome up with the perfect API for a particular use case, but that never happens. Realize that you are usually\ntrading a shitty general API For a shitty idiosyncratic API. In my case that is kinda what I want, but YMMV.</p>\n<p>I read <a href=\"http://pragprog.com/book/ppmetr/metaprogramming-ruby\">Metaprogramming Ruby</a> when I realized that I would be working in Ruby soon because I'm a\nsucker for esoteric language features. I remembered there being a discussion in there about using <code class=\"language-text\">instance_eval</code>\nto allow you to use an API without having to call a function directly on an object because of the implicit self\nin Ruby. I used this idea to clean up the API wrapper that I eventually came up, but I had to go one step\nfurther because I needed to pass an argument into my block to really make this wrapper shine.</p>\n<p>I have a service object, which is some low level library that has an API that already solves some problem I have.\nIt also has some kind of type of object that it will yield to you. That object is what you actually are going\nto interact with.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Service</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">with_object</span></span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token class-name\">ServiceType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceType</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">alpha</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">+</span> a\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">beta</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">gamma</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">3</span> <span class=\"token operator\">+</span> a\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The traditional way of using this API would just be to do:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">service <span class=\"token operator\">=</span> <span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'some config'</span></span><span class=\"token punctuation\">)</span>\nservice<span class=\"token punctuation\">.</span>with_object<span class=\"token punctuation\">(</span><span class=\"token symbol\">a</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'something'</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>obj<span class=\"token operator\">|</span>\n  obj<span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n  obj<span class=\"token punctuation\">.</span>beta<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n  obj<span class=\"token punctuation\">.</span>gamma<span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>That doesn't look so bad, but think about if calling <code class=\"language-text\">alpha</code> then <code class=\"language-text\">beta</code> in that\norder meant to do something specific that has a particular meaning to you. Then\nwrapping up some of these calls into your own interface would be nice:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Interface</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add</span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>gamma<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">times</span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">.</span>beta<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> obj<span class=\"token punctuation\">.</span>beta<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">interact_with</span></span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># keep reading</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This is the interface you want to expose, whatever it means, it takes the service\nobject as an input and possibly some other parameters and does whatever you need.\nWhy does it takes the service object as an input? You could actually stash the\nservice object in an ivar because of where we get it as you will see later, but\nI prefer this because it makes this interface pure. That is, you can test these\nwith no work because they are pure functions.</p>\n<p>Now I am going to skip over that one method stub and just show you how you use this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">do_work</span></span>\n    <span class=\"token class-name\">Interface</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>interact_with<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'config data'</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>obj<span class=\"token operator\">|</span>\n      x <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      times<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nputs <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>do_work</code></pre></div>\n<p>We have another class that uses this interface. I wrote it as a class just to wrap\nthis up into something self contained, but there is no need for that. Basically,\nyou call <code class=\"language-text\">interact_with</code> with your configuration data and then use a block\nto use your new interface. Inside this object you can call instance methods on\nyour interface class without specifying an instance. You are yielded the service\nobject so you can pass it through to the pure functions you have defined. How do\nwe accomplish this?</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Interface</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">interact_with</span></span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with_object <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>obj<span class=\"token operator\">|</span>\n      instance_exec obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It is really simple in the end. You just use <code class=\"language-text\">instance_exec</code> which allows you to\nexecute <code class=\"language-text\">block</code> in the context of the <code class=\"language-text\">Interface</code> class and pass the <code class=\"language-text\">obj</code> as\na variable to the block.</p>\n<p>You can \"clean\" this up a bit if you don't care about pure functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Interface</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@obj</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@obj</span><span class=\"token punctuation\">.</span>gamma<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">times</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@obj</span><span class=\"token punctuation\">.</span>beta<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token variable\">@obj</span><span class=\"token punctuation\">.</span>beta<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">interact_with</span></span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with_object <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>obj<span class=\"token operator\">|</span>\n      <span class=\"token variable\">@obj</span> <span class=\"token operator\">=</span> obj\n      instance_eval <span class=\"token operator\">&amp;</span>block\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">do_work</span></span>\n    <span class=\"token class-name\">Interface</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>interact_with<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'config data'</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      x <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      times<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It probably depends on the specific problem which version makes sense. I just threw\nthis together today when I was trying to get my Mechanize wrapper to be easier to\nuse. I am not 100% yet whether this is a good pattern, or if the use of <code class=\"language-text\">instance_exec</code>\nis a good use of magic or not in this situation. I guess time will tell with this\none, but I had a good time playing around with Ruby to get this working.</p>","frontmatter":{"title":"Why settle for one ugly API when you can have two?","date":"06 May 2014","categories":"code","tags":["ruby","code","api"]},"timeToRead":5,"wordCount":{"words":1111},"fields":{"sha":"9a9b8cc9a846a5ab6c26cb187880f3092ad02345"},"parent":{"relativePath":"2014-05-06-why-settle-for-one.md"}}},"pageContext":{"slug":"/blog/2014-05-06-why-settle-for-one/"}},"staticQueryHashes":["3159585216","3192915761"],"slicesMap":{}}